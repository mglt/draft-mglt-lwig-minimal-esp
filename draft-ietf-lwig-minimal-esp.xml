<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc docmapping="yes"?>

<rfc category="info" docName="draft-ietf-lwig-minimal-esp-06" ipr="trust200902">
  <front>
    <title abbrev="Minimal ESP">Minimal ESP</title>
    <author surname="Migault" initials="D.M." fullname="Daniel Migault">
      <organization>Ericsson</organization>
      <address>
        <postal>
          <street>8400 boulevard Decarie</street>
          <city>Montreal, QC H4P 2N2</city>
          <country>Canada</country>
        </postal>
        <email>daniel.migault@ericsson.com</email>
      </address>
    </author>
    <author surname="Guggemos" initials="T.G." fullname="Tobias Guggemos">
      <organization>LMU Munich</organization>
      <address>
        <postal>
          <street>MNM-Team</street>
          <street>Oettingenstr. 67</street>
          <city>80538 Munich</city>
          <region>Bavaria</region>
          <country>Germany</country>
        </postal>
        <email>guggemos@mnm-team.org</email>
      </address>
    </author>
    <date />
    <area>INTERNET</area>
    <workgroup>Light-Weight Implementation Guidance (lwig)</workgroup>
    <abstract>
      
<t>This document describes a minimal IP Encapsulation Security Payload (ESP) defined in RFC 4303. Its purpose is to enable implementation of ESP with a minimal set of options to remain compatible with ESP as described in RFC 4303. 
A minimal version of ESP is not intended to become a replacement of the RFC 4303 ESP. 
Instead, a minimal implementation is expected to be optimized for constrained environment while remaining interoperable with implementations of RFC 4303 ESP.
In addition, this document also provides some considerations to implement minimal ESP in a constrained environment which includes limiting the number of flash writes, handling frequent wakeup / sleep states, limiting wakeup time, or reducing the use of random generation. </t>

<t> This document does not update or modify RFC 4303, but provides a compact description of how to implement the minimal version of the protocol. 
RFC 4303 remains the authoritative description.  </t>

</abstract>
</front>
  
<middle>

<section title="Introduction">
      
<t>ESP <xref target="RFC4303"/>  is part of the IPsec protocol suite <xref target="RFC4301"/>. 
IPsec is used to provide confidentiality, data origin authentication, connectionless integrity, an anti-replay service (a form of partial sequence integrity) and limited traffic flow confidentiality (TFC) padding.</t>

<t><xref target="fig-esp-description"/> describes an ESP Packet.
Currently ESP is implemented in the kernel of major multipurpose Operating Systems (OS). 
The ESP and IPsec suite is usually implemented in a complete way to fit multiple purpose usage of these OS. 
However, completeness of the IPsec suite as well as multipurpose scope of these OS is often performed at the expense of resources, or performance. 
As a result, constrained devices are likely to have their own implementation of ESP optimized and adapted to their specificities such as limiting the number of flash writes (for each packet or across wake time),Â handling frequent wakeup and sleep state, limiting wakeup time, or reducing the use of random generation.
With the adoption of IPsec by IoT devices with minimal IKEv2 <xref target="RFC7815"/> and ESP Header Compression (EHC) with <xref target="I-D.mglt-ipsecme-diet-esp"/> or <xref target="I-D.mglt-ipsecme-ikev2-diet-esp-extension"/>, it becomes crucial that ESP implementation designed for constrained devices remains inter-operable with the standard ESP implementation to avoid a fragmented usage of ESP. 
This document describes the minimal properties an ESP implementation needs to meet to remain interoperable with <xref target="RFC4303"/> ESP. 
In addition, this document also provides a set of options to implement these properties under certain constrained environments.
This document does not update or modify RFC 4303, but provides a compact description of how to implement the minimal version of the protocol. 
RFC 4303 remains the authoritative description.  </t>

<t> For each field of the ESP packet represented in <xref target="fig-esp-description"/> this document provides recommendations and guidance for minimal implementations. 
The primary purpose of Minimal ESP is to remain interoperable with other nodes implementing RFC 4303 ESP, while limiting the standard complexity of the implementation.
</t>

<figure anchor="fig-esp-description" title="ESP Packet Description">
<artwork><![CDATA[
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ----
|               Security Parameters Index (SPI)                 | ^Int.
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |Cov-
|                      Sequence Number                          | |ered
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | ----
|                    Payload Data* (variable)                   | |   ^
~                                                               ~ |   |
|                                                               | |Conf.
+               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |Cov-
|               |     Padding (0-255 bytes)                     | |ered*
+-+-+-+-+-+-+-+-+               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |   |
|                               |  Pad Length   | Next Header   | v   v
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ------
|         Integrity Check Value-ICV   (variable)                |
~                                                               ~
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork>
</figure>
    
</section>
    
<section anchor="sec-spi" title="Security Parameter Index (SPI) (32 bit)">

<!-- what is the spi / definition -->
<t> According to the <xref target="RFC4303"/>, the SPI is a mandatory 32 bits field and is not allowed to be removed.  </t>

<t> The SPI has a local significance to index the Security Association (SA). 
From <xref target="RFC4301"/> section 4.1, nodes supporting only unicast communications can index their SA only using the SPI. 
On the other hand, nodes supporting multicast communications must also use the IP addresses and thus SA lookup needs to be performed using the longest match.  </t>

<t> For nodes supporting only unicast communications, it is recommended to index SA with the SPI only. 
The index may be based on the full 32 bits of SPI or a subset of these bits. 
The node may require a combination of the SPI as well as other parameters (like the IP address) to index the SA.</t>

<t> Values 0-255 must not be used. 
As per section 2.1 of <xref target="RFC4303"/>, values 1-255 are reserved and 0 is only allowed to be used internally and it must not be sent on the wire. </t>

<!-- generation of the spi -->

<t> <xref target="RFC4303"/> does not require the SPI to be randomly generated over 32 bits.
However, this is the recommended way to generate SPIs as it provides some privacy benefits and avoids, for example, correlation between ESP communications. 
To randomly generate a 32 bit SPI, the node generates a random 32 bit valueand checks it does not fall in the 0-255 range. 
If the SPI has an acceptable value, it is used to index the inbound session, otherwise the SPI is re-generated until an acceptable value is found. 
</t>

<t>However, some constrained nodes may be less concerned by the privacy properties associated to SPIs randomly generated. 
Examples of such nodes might include sensors looking to reduce their code complexity, in which case the use of a predictive function to generate the SPI might be preferred over the generation and handling of random values. 
An example of such predictable function may consider the combination of a fixed value and the memory address of the SAD structure. 
For every incoming packet, the node will be able to point the SAD structure directly from the SPI value. 
This avoids having a separate and additional binding between SPI and SAD entries that is involved for every incoming packet. 
</t>

<!-- privacy / security implication for non random SPIs -->

<section title="Considerations over SPI generation">

<t>SPI that are not randomly generated over 32 bits may lead to privacy and security concerns. 
As a result, the use of alternative designs requires careful security and privacy reviews. 
This section provides some considerations upon the adoption of alternative designs. </t>

<t>Note that SPI value is used only for inbound traffic, as such the SPI negotiated with IKEv2 <xref target="RFC7296"/> or <xref target="RFC7815"/> by a peer, is the value used by the remote peer when it sends traffic. 
As SPI is only used for inbound traffic by the peer, this allows each peer to manage the set of SPIs used for its inbound traffic. 
Similarly, the privacy concerns associated with the generation of nonrandom SPI is also limited to the incoming traffic.</t>

<t>When alternate designs are considered, it is likely that the number of possible SPIs will be limited. 
This limit should both consider the number of inbound SAs - possibly per IP addresses - as well as the ability for the node to rekey. 
SPI can typically be used to implement a key update with the SPI indicating the key is being used. 
For example, a SPI might be encoded with the Security Association Database (SAD) entry on a subset of bytes (for example 3 bytes), while the remaining byte indicates the rekey index. 
</t>


<t>The use of a smaller number of SPIs across communications comes with privacy and security concerns.
Typically some specific values or subset of SPI values may reveal the models or manufacturer of the node implementing ESP. 
This may raise some privacy issues as an observer is likely to be able to determine the constrained devices of the network. 
In some cases, these nodes may host a very limited number of applications - typically a single application - in which case the SPI would provide some information related to the application of the user. 
In addition, the device or application may be associated with some vulnerabilities, in which case specific SPI values may be used by an attacker to discover vulnerabilities. 
</t>

<t>
While the use of randomly generated SPIs may reduce the leakage or privacy of security related information by ESP itself, these information may also be leaked otherwise. 
As a result, a privacy analysis should consider at least the type of information as well the traffic pattern before determining non random SPI can be used. 
Typically, temperature sensors, wind sensors, used outdoors do not leak privacy sensitive information and mosty of its traffic is expected to be outbound traffic. 
When used indoors, a sensor that reports every minute an encrypted status of the door (closed or opened) leaks truly little privacy sensitive information outside the local network. </t>



</section>

</section>
    
<section anchor="sec-sn" title="Sequence Number(SN) (32 bit)">
      
<t> According to  <xref target="RFC4303"/>, the Sequence Number (SN) is a mandatory 32 bits field in the packet.  </t>

<t> The SN is set by the sender so the receiver can implement anti-replay protection. 
The SN is derived from any strictly increasing function that guarantees: if packet B is sent after packet A, then SN of packet B is strictly greater than the SN of packet A.  </t>

<t>Some constrained devices may establish communication with specific devices, like a specific gateway, or nodes similar to them. 
As a result, the sender may know whereas the receiver implements anti-replay protection or not. 
Even though the sender may know the receiver does not implement anti-replay protection, the sender must implement an always increasing function to generate the SN.  </t> 

<t>Usually, SN is generated by incrementing a counter for each packet sent. 
A constrained device may avoid maintaining this context and use another source that is known to always increase. 
Typically, constrained nodes using 802.15.4 Time Slotted Channel Hopping (TSCH), whose communication is heavily dependent on time, can take advantage of their clock to generate the SN. 
A lot of IoT devices are in a sleep state most of the time wake up and are only awake to perform a specific operation before going back to sleep. 
They do have separate hardware that allows them to wake up after a certain timeout, and most likely also timers that start running when the device was booted up, so they might have a concept of time with certain granularity. 
This requires to store any information in a stable storage - such as flash memory - that can be restored across sleeps.
Storing information associated with the SA such as SN requires some read and writing operation on a stable storage after each packet is sent as opposed to SPI or keys that are only written at the creation of the SA.
Such operations are likely to wear out the flash, and slow down the system greatly, as writing to flash is not as fast as reading.
Their internal clocks/timers might not be very accurate, but they should be enough to know that each time they wake up their time is greater than what it was last time they woke up.
Using time for SN would guarantee a strictly increasing function and avoid storing any additional values or context related to the SN. 
When the use of a clock is considered, one should take care that packets associated with a given SA are not sent with the same time value.
Note however that standard receivers are generally configured with incrementing counters and, if not appropriately configured, the use of a significantly larger SN may result in the packet out of the receiver's windows and that packet being discarded. 
</t>

<t>For inbound traffic, it is recommended that any receiver provides anti-replay protection, and the size of the window depends on the ability of the network to deliver packets out of order. 
As a result, in an environment where out of order packets is not possible the window size can be set to one. 
However, while recommended, there are no requirements to implement an anti-replay protection mechanism implemented by IPsec. 
Similarly to the SN the implementation of anti replay protection may require the device to write the received SN for every packet, which may in some cases come with the same drawbacks as those exposed for SN. 

As a result, some implementations may drop a non required anti replay protection especially when the necessary resource involved overcomes the benefit of the mechanism. 
These resources need also to balance that absence of anti-replay mechanism, may lead to unnecessary integrity check operations that might be significantly more expensive as well.  
A typical example might consider an IoT device such as a temperature sensor that is sending a temperature every 60 seconds, and that receives an acknowledgment from the receiver. 
In such cases, the ability to spoof and replay an acknowledgement is of limited interest and may not justify the implementation of an anti replay mechanism. 

Receiving peers may also implement their own anti-replay mechanism. 
Typically, when the sending peer is using SN based on time, anti-replay may be implemented by discarding any packets that present a SN whose value is too much in the past. 
Note that such mechanisms may consider clock drifting in various ways in addition to acceptable delay induced by the network to avoid the anti replay windows rejecting legitimate packets.
When a packet is received at a regular time interval, some variant of time based mechanisms may not even use the value of the SN, but instead only consider the receiving time of the packet.
</t>

<t>SN can be encoded over 32 bits or 64 bits - known as Extended Sequence Number (ESN). 
As per <xref target="RFC4303"/>, the support of ESN is not mandatory. 
The determination of the use of ESN is based on the largest possible value a SN can take over a session. 
When SN is incremented for each packet, the number of packets sent over the lifetime of a session may be considered. 
However, when the SN is incremented differently - such as when time is used - the maximum value SN needs to be considered instead.   
Note that the limit of messages being sent is primarily determined by the security associated with the key rather than the SN.
The security of all data protected under a given key decreases slightly with each message and a node must ensure the limit is not reached - even though the SN would permit it. 
Estimation of the maximum number of packets to be sent by a node is always challenging and as such should be considered cautiously as nodes could be online for much more time than expected. 
Even for constrained devices, it is recommended to implement some rekey mechanisms (see <xref target="sec-security-considerations"/>). 
</t>


</section>
    
<section anchor="sec-padding" title="Padding">
      
<t> The purpose of padding is to respect the 32 bit alignment of ESP or block size expected by an encryption transform - such as AES-CBC for example.
ESP must have at least one padding byte Pad Length that indicates the padding length. 
ESP padding bytes are generated by a succession of unsigned bytes starting with 1, 2, 3 with the last byte set to Pad Length, where Pad Length designates the length of the padding bytes.
</t>

<t> Checking the padding structure is not mandatory, so the constrained device may not proceed to such checks, however, in order to interoperate with existing ESP implementations, it must build the padding bytes as recommended by ESP.  </t>

<t> In some situation the padding bytes may take a fixed value.
This would typically be the case when the Data Payload is of fix size.  </t>

<t>ESP <xref target="RFC4303"/> also provides Traffic Flow Confidentiality (TFC) as a way to perform padding to hide traffic characteristics, which differs from respecting a 32 bit alignment. 
TFC is not mandatory and must be negotiated with the SA management protocol.
TFC has not yet being widely adopted for standard ESP traffic. 
One possible reason is that it requires to shape the traffic according to one traffic pattern that needs to be maintained. 
This is likely to require extra processing as well as providing a "well recognized" traffic shape which could end up being counterproductive. 
As such, it is NOT recommended that minimal ESP implementation supports TFC.</t>

<t>As a result, TFC cannot be enabled with minimal ESP, and communication protection that were relying on TFC will be more sensitive to traffic shaping. 
This could expose the application as well as the devices used to a passive monitoring attacker. 
Such information could be used by the attacker in case a vulnerability is disclosed on the specific device. 
In addition, some application use - such as health applications - may also reveal important privacy oriented information.</t>

<t>Some constrained nodes that have limited battery lifetime may also prefer avoiding sending extra padding bytes. 
However, the same nodes may also be very specific to an application and device. 
As a result, they are also likely to be the main target for traffic shaping. 
In most cases, the payload carried by these nodes is quite small, and the standard padding mechanism may also be used as an alternative to TFC, with a sufficient tradeoff between the require energy to send additional payload and the exposure to traffic shaping attacks. 
In addition, the information leaked by the traffic shaping may also be addressed by the application level. 
For example, it is preferred to have a sensor sending some information at regular time interval, rather than when a specific event is happening. 
Typically, a sensor monitoring the temperature, or a door is expected to send regularly the information - i.e. the temperature of the room or whether the door is closed or open) instead of only sending the information when the temperature has raised or when the door is being opened. </t>
    
</section>
    
<section anchor="sec-nh" title="Next Header (8 bit)">

<t>According to <xref target="RFC4303"/>, the Next Header is a mandatory 8 bits field in the packet. 
Next header specifies the data contained in the payload as well as dummy packet, i.e. packets with the Next Header with a value 59 meaning "no next header". 
In addition, the Next Header may also carry an indication on how to process the packet <xref target="I-D.nikander-esp-beet-mode"/>.  </t>

<t> The ability to generate and receive dummy packets is required by <xref target="RFC4303"/>. 
For interoperability, a minimal ESP implementation must discard dummy packets without indicating an error.
Note that such recommendation only applies for nodes receiving packets, and that nodes designed to only send data may not implement this capability.  </t>
      
<t> As the generation of dummy packets is subject to local management and based on a per-SA basis, a minimal ESP implementation may not generate such dummy packet.
More especially, in constrained environment sending dummy packets may have too much impact on the device lifetime, and so may be avoided. 
On the other hand, constrained nodes may be dedicated to specific applications, in which case, traffic pattern may expose the application or the type of node. 
For these nodes, not sending dummy packet may have some privacy implication that needs to be measured. 
However, for the same reasons exposed in <xref target="sec-padding"/> traffic shaping at the IPsec layer may also introduce some traffic pattern, and on constrained devices the application is probably the most appropriated layer to limit the risk of leaking information by traffic shaping.</t>
      
<t> In some cases, devices are dedicated to a single application or a single transport protocol, in which case, the Next Header has a fixed value.</t> 

<t>Specific processing indications have not been standardized yet <xref target="I-D.nikander-esp-beet-mode"/> and is expected to result from an agreement between the peers.
As a result, it should not be part of a minimal implementation of ESP.  </t>

</section>
    
<section anchor="sec-icv" title="ICV">
      
<t>The ICV depends on the cryptographic suite used.
Currently <xref target="RFC8221"/> only recommends cryptographic suites with an ICV which makes the ICV a mandatory field.  </t>

<t> As detailed in <xref target="RFC8221"/> authentication or authenticated encryption are recommended and as such the ICV field must be present with a size different from zero. 
It length is defined by the security recommendations only.  </t>

</section>

<section anchor="sec-encr" title="Cryptographic Suites">
      
<t> The cryptographic suites implemented are an important component of ESP. 
The recommended algorithms to use are expected to evolve over time and implementers should follow the recommendations provided by <xref target="RFC8221"/> and updates. 
</t>

<t> This section lists some of the criteria that may be considered. 
The list is not expected to be exhaustive and may also evolve overtime. 
As a result, the list is provided as informational: </t>
      
<t><list style="numbers">
          
<t> Security: Security is the criteria that should be considered first for the selection of encryption algorithm transform. 
The security of encryption algorithm transforms is expected to evolve over time, and it is of primary importance to follow up-to-date security guidance and recommendations.  
The chosen encryption algorithm must not be known vulnerable or weak (see <xref target="RFC8221"/> for outdated ciphers). 
ESP can be used to authenticate only or to encrypt the communication. 
In the latter case, authenticated encryption must always be considered <xref target="RFC8221"/>.</t>

<t>Resilience to nonce re-use: Some transforms -including AES-GCM - are very sensitive to nonce collision with a given key. 
While the generation of the nonce may prevent such collision during a session, the mechanisms are unlikely to provide such protection across reboot. 
This causes an issue for devices that are configured with a key. 
When the key is likely to be re-used across reboots, it is recommended to consider algorithms that are nonce misuse resistant such as, for example, AES-SIV <xref target="RFC5297"/>, AES-GCM-SIV <xref target="RFC8452"/> or Deoxys-II <xref target="DeoxysII"/>. 
Note however that currently none of them has yet been defined for ESP. </t>

<t> Interoperability:  Interoperability considers the encryption algorithm transforms shared with the other nodes. 
Note that it is not because an encryption algorithm transform is widely deployed that it is secured. 
As a result, security should not be weakened for interoperability. 
<xref target="RFC8221"/> and successors consider the life cycle of encryption algorithm transforms sufficiently long to provide interoperability.  
Constrained devices may have limited interoperability requirements which makes possible to reduces the number of encryption algorithm transforms to implement.</t>

<t> Power Consumption and Cipher Suite Complexity: Complexity of the encryption algorithm transform or the energy associated with it are especially considered when devices have limited resources or are using some batteries, in which case the battery determines the life of the
device. 
The choice of a cryptographic function may consider re-using specific libraries or to take advantage of hardware acceleration provided by the device. 
For example, if the device benefits from AES hardware modules and uses AES-CTR, it may prefer AUTH_AES-XCBC for its authentication. 
In addition, some devices may also embed radio modules with hardware acceleration for AES-CCM, in which case, this mode may be preferred.</t>

<t> Power Consumption and Bandwidth Consumption: Similarly to the encryption algorithm transform complexity, reducing the payload sent, may significantly reduce the energy consumption of the device. 
As a result, encryption algorithm transforms with low overhead may be considered. 
To reduce the overall payload size one may, for example:

<list style="numbers">

<t> Use of counter-based ciphers without fixed block length (e.g. AES-CTR, or ChaCha20-Poly1305).</t>

<t>Use of ciphers with capability of using implicit IVs <xref target="RFC8750"/>.</t>

<t>Use of ciphers recommended for IoT <xref target="RFC8221"/>.</t>

<t> Avoid Padding by sending payload data which are aligned to the cipher block length - 2 for the ESP trailer.</t>

</list></t>
        
</list></t>
    
</section>
    
<section title="IANA Considerations">
     
<t>There are no IANA consideration for this document.</t>
    
</section>

<section anchor="sec-security-considerations" title="Security Considerations">
      
<t> Security considerations are those of <xref target="RFC4303"/>. 
In addition, this document provided security recommendations and guidance over the implementation choices for each field.  </t>

<t>The security of a communication provided by ESP is closely related to the security associated with the management of that key. 
This usually includes mechanisms to prevent a nonce from repeating, for example.
When a node is provisioned with a session key that is used across reboot, the implementer must ensure that the mechanisms put in place remain valid across reboot as well. 
</t>

<t>It is recommended to use ESP in conjunction with key management protocols such as for example IKEv2 <xref target="RFC7296"/> or minimal IKEv2 <xref target="RFC7815"/>.
Such mechanisms are responsible for negotiating fresh session keys as well as prevent a session key being use beyond its lifetime.

When such mechanisms cannot be implemented and the session key is, for example, provisioned, the nodes must ensure that keys are not used beyond their lifetime and that the appropriate use of the key remains across reboots - e.g. conditions on counters and nonces remains valid. 
</t>

<t>When a node generates its key or when random value such as nonces are generated, the random generation must follow <xref target="RFC4086"/>. In addition <xref target="SP-800-90A-Rev-1"/> provides appropriated guidance to build random generators based on deterministic random functions. 
</t>

</section>
    
<section title="Acknowledgment">
      
<t> The authors would like to thank Daniel Palomares, Scott Fluhrer, Tero Kivinen, Valery Smyslov, Yoav Nir, Michael Richardson, Thomas Peyrin and Eric Thormarker for their valuable comments.  
In particular Scott Fluhrer suggested to include the rekey index in the SPI.
Tero Kivinen provided also multiple clarifications and examples of deployment ESP within constrained devices with their associated optimizations. 
Thomas Peyrin Eric Thormarker and Scott Fluhrer suggested and clarified the use of transform resilient to nonce misuse.
</t>
   
</section> 

</middle> 

<back> 

<references title="Normative References">

<?rfc include="reference.RFC.2119.xml"?>
<!--<?rfc include="reference.RFC.3602.xml"?>-->
<!--<?rfc include="reference.RFC.3686.xml"?>-->
<!--<?rfc include="reference.RFC.4106.xml"?>-->
<?rfc include="reference.RFC.4086.xml"?>
<?rfc include="reference.RFC.4301.xml"?>
<?rfc include="reference.RFC.4303.xml"?>
<!--<?rfc include="reference.RFC.4309.xml"?>-->
<?rfc include="reference.RFC.7296.xml"?>
<?rfc include="reference.RFC.7815.xml"?>
<?rfc include="reference.RFC.8174.xml"?> 
<?rfc include="reference.RFC.8221.xml"?>
<!--<?rfc include="reference.RFC.8247.xml"?>-->
<?rfc include="reference.RFC.8750.xml"?>

</references>
    
<references title="Informative References">

<?rfc include="reference.I-D.nikander-esp-beet-mode.xml"?>
<?rfc include="reference.I-D.mglt-ipsecme-diet-esp.xml"?>
<?rfc include="reference.I-D.mglt-ipsecme-ikev2-diet-esp-extension.xml"?>
<?rfc include="reference.RFC.8452.xml"?>
<?rfc include="reference.RFC.5297.xml"?>
<reference anchor="SP-800-90A-Rev-1" target="https://csrc.nist.gov/publications/detail/sp/800-90a/rev-1/final">
  <front>
    <title>Recommendation for Random Number Generation Using Deterministic Random Bit Generators</title>
<author initials="E. B." surname="Elain" fullname="Elaine Barker">
                <organization >NIST</organization>
            </author>
<author initials="J. K." surname="Kelsey" fullname="John Kelsey">
                <organization >NIST</organization>
            </author>
            <date month="" year="" />

  </front>
</reference>

<reference anchor="DeoxysII" target="https://competitions.cr.yp.to/round3/deoxysv141.pdf">
  <front>
    <title>Deoxys v1.41</title>
<author initials="J. J." surname="Jeremy" fullname="Jeremy Jean">
                <organization >Nanyang Technological University, Singapore</organization>
            </author>
<author initials="I. N." surname="Ivica" fullname="Ivica Nikolic">
                <organization >Nanyang Technological University, Singapore</organization>
            </author>
<author initials="T. P." surname="Thomas" fullname="Thomas Peyrin">
                <organization >Nanyang Technological University, Singapore</organization>
            </author>
<author initials="Y. S." surname="Yannick" fullname="Yannick Seurin">
                <organization >ANSSI, Paris, France</organization>
            </author>

            <date month="October" year="2016" />
  </front>

</reference>

</references>

  </back>
</rfc>
